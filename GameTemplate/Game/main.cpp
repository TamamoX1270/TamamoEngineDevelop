#include "stdafx.h"
#include "system/system.h"
#include "Game.h"

/// <summary>
/// ライト構造体
/// </summary>
struct Light
{
	// ディレクションライト用のメンバ
	Vector3 dirDirection;   // ライトの方向
	float pad0;
	Vector3 dirColor;       // ライトのカラー
	float pad1;

	// step-1 ライト構造体にポイントライト用のメンバ変数を追加する
	Vector3 ptPosition;		//位置。
	float pad2;					//パディング。
	Vector3 ptColor;			//カラー。
	float ptRange;				//影響範囲。

	Vector3 eyePos;         // 視点の位置
	float pad3;
	Vector3 ambientLight;   // アンビエントライト
};


// K2EngineLowのグローバルアクセスポイント。
K2EngineLow* g_k2EngineLow = nullptr;

/// <summary>
/// メイン関数
/// </summary>
int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nCmdShow)
{
	// ゲームの初期化。
	InitGame(hInstance, hPrevInstance, lpCmdLine, nCmdShow, TEXT("Game"));
	
	// k2EngineLowの初期化。
	g_k2EngineLow = new K2EngineLow();
	g_k2EngineLow->Init(g_hWnd, FRAME_BUFFER_W, FRAME_BUFFER_H);
	g_camera3D->SetPosition({ 0.0f, 100.0f, 200.0f });
	g_camera3D->SetTarget({ 0.0f, 50.0f, 0.0f });

	NewGO<Game>(0);

	// ここからゲームループ。
	while (DispatchWindowMessage())
	{
		// フレームの開始時に呼び出す必要がある処理を実行
		g_k2EngineLow->BeginFrame();

		// ゲームオブジェクトマネージャーの更新処理を呼び出す。
		g_k2EngineLow->ExecuteUpdate();

		// ゲームオブジェクトマネージャーの描画処理を呼び出す。
		g_k2EngineLow->ExecuteRender();

		// デバッグ描画処理を実行する。
		g_k2EngineLow->DebubDrawWorld();

		// フレームの終了時に呼び出す必要がある処理を実行。
		g_k2EngineLow->EndFrame();

	}

	delete g_k2EngineLow;

	return 0;
}